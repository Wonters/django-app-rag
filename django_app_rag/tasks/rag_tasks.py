import dramatiq 
import json
import time
import traceback
from pathlib import Path
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, validator
from enum import Enum
from django_app_rag.models import Source, Answer, Document
from django_app_rag.logging import get_logger_loguru
from django_app_rag.rag.agents.tools import QuestionAnswerTool, DiskStorageRetrieverTool

logger = get_logger_loguru(__name__, "qa.log")


class TaskStatus(str, Enum):
    """Statuts possibles pour une t√¢che RAG"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class ErrorInfo(BaseModel):
    """Informations d√©taill√©es sur une erreur"""
    message: str = Field(..., description="Message d'erreur principal")
    details: Optional[str] = Field(None, description="D√©tails techniques de l'erreur")
    error_type: Optional[str] = Field(None, description="Type d'erreur (exception class)")
    traceback: Optional[str] = Field(None, description="Traceback de l'erreur")


class RAGTaskResponse(BaseModel):
    """R√©ponse standardis√©e pour toutes les t√¢ches RAG"""
    status: TaskStatus = Field(..., description="Statut global de la t√¢che")
    message: str = Field(..., description="Message descriptif du r√©sultat")
    
    # Informations sur le traitement
    processed: int = Field(0, description="Nombre d'√©l√©ments trait√©s avec succ√®s")
    total: int = Field(0, description="Nombre total d'√©l√©ments √† traiter")
    failed: int = Field(0, description="Nombre d'√©l√©ments en √©chec")
    
    # Informations d'erreur
    error: Optional[ErrorInfo] = Field(None, description="Erreur globale si la t√¢che a √©chou√©")
    
    # M√©tadonn√©es
    source_id: Optional[int] = Field(None, description="ID de la source trait√©e")
    config_path: Optional[str] = Field(None, description="Chemin de configuration utilis√©")
    execution_time: Optional[float] = Field(None, description="Temps d'ex√©cution total en secondes")
    
    # Informations additionnelles
    warnings: List[str] = Field(default_factory=list, description="Avertissements non critiques")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="M√©tadonn√©es additionnelles")

    @validator('failed', pre=True, always=True)
    def set_failed_count(cls, v, values):
        """Calcule automatiquement le nombre d'√©checs si non fourni"""
        if v is not None:
            return v
        if 'processed' in values and 'total' in values:
            return values['total'] - values['processed']
        return 0

    def to_dict(self) -> Dict[str, Any]:
        """Convertit la r√©ponse en dictionnaire pour la s√©rialisation JSON"""
        return self.dict()

    def is_success(self) -> bool:
        """V√©rifie si la t√¢che s'est termin√©e avec succ√®s"""
        return self.status in [TaskStatus.COMPLETED, TaskStatus.PENDING]

    def has_errors(self) -> bool:
        """V√©rifie s'il y a des erreurs dans la r√©ponse"""
        return self.status == TaskStatus.FAILED or self.error is not None or self.failed > 0


def create_error_response(source_id: int, config_path: str, error: Exception, message: str = None) -> Dict[str, Any]:
    """Cr√©e une r√©ponse d'erreur standardis√©e s√©rialisable"""
    if message is None:
        message = "Erreur lors du processus QA"
    
    error_info = ErrorInfo(
        message=str(error),
        details=str(error),
        error_type=type(error).__name__,
        traceback=traceback.format_exc()
    )
    
    response = RAGTaskResponse(
        status=TaskStatus.FAILED,
        message=message,
        error=error_info,
        source_id=source_id,
        config_path=config_path,
        execution_time=0.0,
        warnings=[],
        metadata={}
    )
    
    return response.to_dict()


def create_success_response(source_id: int, config_path: str, processed: int, total: int, message: str = None, execution_time: float = 0.0) -> Dict[str, Any]:
    """Cr√©e une r√©ponse de succ√®s standardis√©e s√©rialisable"""
    if message is None:
        message = f"Processus QA termin√© avec succ√®s. {processed} questions trait√©es sur {total}."
    
    response = RAGTaskResponse(
        status=TaskStatus.COMPLETED,
        message=message,
        processed=processed,
        total=total,
        source_id=source_id,
        config_path=config_path,
        execution_time=execution_time,
        warnings=[],
        metadata={}
    )
    
    return response.to_dict()


@dramatiq.actor(
    queue_name="rag_tasks",
    actor_name="rag_app.tasks",
    time_limit=1000 * 60 * 10,
    max_retries=1,
    store_results=True,
)
def launch_qa_process(source_id: int, config_path: str):
    """
    Lance un processus Question/R√©ponse en utilisant Dramatiq.
    
    Args:
        source_id: ID de la source √† analyser
        config: Configuration pour le processus RAG
    """
    start_time = time.time()
    try:
        logger.info("--------------------------------")
        logger.info(f"üöÄ D√©marrage du processus QA pour la source {source_id}")
        
                # Valider le chemin de configuration
        if not config_path:
            logger.error("Chemin de configuration manquant")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=ValueError("Chemin de configuration manquant"),
                message="Configuration invalide"
            )
        
        config_path_obj = Path(config_path)
        if not config_path_obj.exists():
            logger.error(f"Fichier de configuration introuvable: {config_path}")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=FileNotFoundError(f"Fichier de configuration introuvable: {config_path}"),
                message="Configuration introuvable"
            )
        
        logger.info(f"Configuration valid√©e: {config_path}")
        
        # R√©cup√©rer la source et ses questions
        try:
            source = Source.objects.prefetch_related('questions__answer').get(id=source_id)
            logger.info(f"Source r√©cup√©r√©e: {source.title} (ID: {source_id})")
        except Source.DoesNotExist:
            logger.error(f"Source {source_id} non trouv√©e")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=ValueError(f"Source {source_id} non trouv√©e"),
                message="Source introuvable"
            )
        except Exception as source_error:
            logger.error(f"Erreur lors de la r√©cup√©ration de la source {source_id}: {source_error}")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=source_error,
                message="Erreur lors de la r√©cup√©ration de la source"
            )
        
        try:
            questions = source.questions.all()
            logger.info(f"Questions r√©cup√©r√©es: {questions.count()} questions trouv√©es")
        except Exception as questions_error:
            logger.error(f"Erreur lors de la r√©cup√©ration des questions pour la source {source_id}: {questions_error}")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=questions_error,
                message="Erreur lors de la r√©cup√©ration des questions"
            )
        
        if not questions.exists():
            logger.warning(f"Aucune question trouv√©e pour la source {source_id}")
            return create_success_response(
                source_id=source_id,
                config_path=config_path,
                processed=0,
                total=0,
                message="Aucune question √† traiter"
            )
        
        logger.info(f"Traitement de {questions.count()} questions pour la source {source_id}")
        
        # Initialiser les outils RAG
        try:
            logger.info(f"Initialisation de l'agent QA")
            agent_qa = QuestionAnswerTool()
            logger.info(f"Agent QA initialis√© avec succ√®s")
        except Exception as qa_error:
            logger.error(f"Erreur lors de l'initialisation de l'agent QA: {qa_error}")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=qa_error,
                message="Erreur lors de l'initialisation des outils RAG"
            )
        
        try:
            logger.info(f"Initialisation de l'agent retriever avec config: {config_path}")
            agent_retriever = DiskStorageRetrieverTool(
                config_path=config_path_obj
            )
            logger.info(f"Agent retriever initialis√© avec succ√®s")
        except Exception as retriever_error:
            logger.error(f"Erreur lors de l'initialisation de l'agent retriever: {retriever_error}")
            return create_error_response(
                source_id=source_id,
                config_path=config_path,
                error=retriever_error,
                message="Erreur lors de l'initialisation des outils RAG"
            )
        
        processed_count = 0
        
        # Traiter chaque question
        for i, question in enumerate(questions):
            try:
                logger.info(f"Traitement de la question {i+1}/{questions.count()}: {question.title}")
                
                # Supprimer l'ancienne r√©ponse
                try:
                    if hasattr(question, 'answer') and question.answer:
                        old_answer = question.answer
                        logger.info(f"Suppression de l'ancienne r√©ponse pour la question {question.title}")
                        try:
                            old_answer.documents.clear()
                            old_answer.delete()
                            logger.debug(f"Ancienne r√©ponse supprim√©e: {old_answer.id}")
                        except Exception as delete_error:
                            logger.error(f"Erreur lors de la suppression de l'ancienne r√©ponse {old_answer.id}: {delete_error}")
                            # Continue with deletion
                except Exception as cleanup_error:
                    logger.error(f"Erreur lors du nettoyage de l'ancienne r√©ponse pour la question {question.title}: {cleanup_error}")
                    # Continue with processing
                
                # R√©cup√©rer les documents pertinents
                try:
                    logger.info(f"R√©cup√©ration des documents pour la question: {question.field}")
                    documents = agent_retriever.forward(question.field)
                    
                    # Parse the JSON to get actual document count
                    try:
                        docs_data = json.loads(documents) if documents else {}
                        doc_count = docs_data.get('total_count', 0) if isinstance(docs_data, dict) else 0
                        logger.info(f"Documents r√©cup√©r√©s: {doc_count} (JSON: {len(documents) if documents else 0} caract√®res)")
                    except json.JSONDecodeError:
                        logger.info(f"Documents r√©cup√©r√©s: JSON invalide (longueur: {len(documents) if documents else 0} caract√®res)")
                    
                    if not documents:
                        logger.warning(f"Aucun document r√©cup√©r√© pour la question {question.title}")
                        # Continue with empty documents
                except Exception as retrieval_error:
                    logger.error(f"Erreur lors de la r√©cup√©ration des documents pour la question {question.title}: {retrieval_error}")
                    documents = ""
                    # Continue with empty documents
                
                # G√©n√©rer la r√©ponse
                try:
                    logger.info(f"G√©n√©ration de la r√©ponse pour la question: {question.title}")
                    answer_data = agent_qa.forward(question.field, documents)
                    logger.info(f"R√©ponse brute g√©n√©r√©e: {len(answer_data) if answer_data else 0} caract√®res")
                    
                    if not answer_data:
                        logger.error(f"Aucune r√©ponse g√©n√©r√©e pour la question {question.title}")
                        continue
                except Exception as answer_error:
                    logger.error(f"Erreur lors de la g√©n√©ration de la r√©ponse pour la question {question.title}: {answer_error}")
                    continue
                
                # Parse the answer data
                try:
                    answer_json = json.loads(answer_data)
                    logger.info(f"R√©ponse pars√©e avec succ√®s pour la question {question.title} {json.dumps(answer_json, ensure_ascii=False)}")
                except json.JSONDecodeError as json_error:
                    logger.error(f"Erreur de parsing JSON pour la question {question.title}: {json_error}")
                    logger.error(f"Donn√©es brutes: {answer_data}")
                    # Skip this question and continue
                    continue
                
                # Handle case where answer_json is a list containing one dictionary
                if isinstance(answer_json, list) and len(answer_json) > 0:
                    answer_json = answer_json[0]
                    logger.info(f"R√©ponse extraite de la liste pour la question {question.title}")
                
                logger.info(f"R√©ponse g√©n√©r√©e pour la question {question.title}: {answer_json.get('answer', '')[:100]}...")
                
                # Validate answer structure
                if not isinstance(answer_json, dict):
                    logger.error(f"R√©ponse invalide pour la question {question.title}: {type(answer_json)}")
                    continue
                
                if "answer" not in answer_json:
                    logger.error(f"Cl√© 'answer' manquante dans la r√©ponse pour la question {question.title}")
                    continue
                
                # Cr√©er la r√©ponse
                try:
                    answer_instance = Answer.objects.create(
                        title=f"R√©ponse automatique {i+1}",
                        field=answer_json.get("answer", "Aucune r√©ponse g√©n√©r√©e"),
                        question=question
                    )
                    logger.info(f"R√©ponse cr√©√©e avec succ√®s: {answer_instance.id}")
                except Exception as create_error:
                    logger.error(f"Erreur lors de la cr√©ation de la r√©ponse pour la question {question.title}: {create_error}")
                    continue
                
                # Cr√©er et associer les documents sources
                if "sources" in answer_json and isinstance(answer_json["sources"], list):
                    source_documents = []
                    for doc in answer_json["sources"]:
                        if isinstance(doc, dict):
                            try:
                                doc_instance = Document.objects.create(
                                    title=doc.get("title", "Document sans titre"),
                                    uid=doc.get("id", f"doc_{i}_{len(source_documents)}"),
                                    similarity_score=doc.get("similarity_score", 0.0),
                                    url=doc.get("url", ""),
                                )
                                source_documents.append(doc_instance)
                                logger.debug(f"Document cr√©√© avec succ√®s: {doc_instance.id}")
                            except Exception as doc_create_error:
                                logger.error(f"Erreur lors de la cr√©ation du document pour la question {question.title}: {doc_create_error}")
                                continue
                        else:
                            logger.warning(f"Document invalide dans les sources: {doc}")
                    
                    if source_documents:
                        try:
                            answer_instance.documents.set(source_documents)
                            answer_instance.save()
                            logger.info(f"Documents sources associ√©s: {len(source_documents)}")
                        except Exception as assoc_error:
                            logger.error(f"Erreur lors de l'association des documents pour la question {question.title}: {assoc_error}")
                            # Continue without documents
                    else:
                        logger.warning(f"Aucun document source valide pour la question {question.title}")
                else:
                    logger.info(f"Aucune source document pour la question {question.title}")
                
                processed_count += 1
                logger.info(f"Question {question.title} trait√©e avec succ√®s")
                
            except Exception as e:
                logger.error(f"Erreur lors du traitement de la question {question.title}: {e}")
                logger.error(f"Type d'erreur: {type(e).__name__}")
                logger.error(f"Traceback complet: ", exc_info=True)
                # Continuer avec la question suivante
                continue
        
        execution_time = time.time() - start_time
        logger.info(f"Processus QA termin√© pour la source {source_id}. {processed_count} questions trait√©es.")
        
        return create_success_response(
            source_id=source_id,
            config_path=config_path,
            processed=processed_count,
            total=questions.count(),
            message=f"Processus QA termin√© avec succ√®s. {processed_count} questions trait√©es.",
            execution_time=execution_time
        )
        
    except Exception as e:
        execution_time = time.time() - start_time
        logger.error(f"Erreur lors du processus QA pour la source {source_id}: {e}")
        logger.error(f"Type d'erreur: {type(e).__name__}")
        logger.error(f"Traceback complet: ", exc_info=True)
        
        return create_error_response(
            source_id=source_id,
            config_path=config_path,
            error=e,
            message="Erreur lors du processus QA"
        )
